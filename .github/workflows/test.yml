name: Test AH Plugin

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        zsh-version: ['5.8', '5.9']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Zsh ${{ matrix.zsh-version }}
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh
        zsh --version
        
    - name: Install Oh-My-Zsh
      run: |
        sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        
    - name: Install ShellCheck
      run: |
        sudo apt-get install -y shellcheck
        
    - name: Run syntax check
      run: |
        zsh -n ah.plugin.zsh
        
    - name: Run ShellCheck
      run: |
        shellcheck *.sh || true
        
    - name: Test plugin loading
      run: |
        mkdir -p ~/.oh-my-zsh/custom/plugins/ah-test
        cp ah.plugin.zsh ~/.oh-my-zsh/custom/plugins/ah-test/
        
        # Test plugin in zsh session
        zsh -c "
          export ZSH=\"$HOME/.oh-my-zsh\"
          plugins=(ah-test)
          source \$ZSH/oh-my-zsh.sh
          
          # Test if functions are loaded
          type ah-help >/dev/null 2>&1 || exit 1
          type dceb >/dev/null 2>&1 || exit 1
          type dclog >/dev/null 2>&1 || exit 1
          
          # Test aliases
          alias dcu >/dev/null 2>&1 || exit 1
          alias dc >/dev/null 2>&1 || exit 1
          
          echo 'Plugin loading test passed!'
        "
        
    - name: Test help command
      run: |
        zsh -c "
          export ZSH=\"$HOME/.oh-my-zsh\"
          plugins=(ah-test)
          source \$ZSH/oh-my-zsh.sh
          ah-help
        "
        
    - name: Test error handling
      run: |
        zsh -c "
          export ZSH=\"$HOME/.oh-my-zsh\"
          plugins=(ah-test)
          source \$ZSH/oh-my-zsh.sh
          
          # Test dceb without arguments (should return 1)
          dceb 2>/dev/null
          if [ \$? -ne 1 ]; then
            echo 'Error handling test failed!'
            exit 1
          fi
          
          echo 'Error handling test passed!'
        "

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ShellCheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
      
    - name: Lint shell scripts
      run: |
        shellcheck *.sh
        echo "Linting completed"

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation files
      run: |
        # Check if required files exist
        test -f README.md || exit 1
        test -f LICENSE || exit 1
        test -f CHANGELOG.md || exit 1
        test -f CONTRIBUTING.md || exit 1
        test -f SECURITY.md || exit 1
        test -f INSTALL.md || exit 1
        
        echo "Documentation check passed!"
        
    - name: Validate README
      run: |
        # Check if README contains essential sections
        grep -q "Installation" README.md || exit 1
        grep -q "Usage" README.md || exit 1
        grep -q "Features" README.md || exit 1
        
        echo "README validation passed!"

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Zsh (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y zsh
        
    - name: Install Zsh (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install zsh
        
    - name: Test basic plugin syntax
      run: |
        zsh -n ah.plugin.zsh
        echo "Syntax check passed on ${{ matrix.os }}"
